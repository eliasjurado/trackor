@page "/pomodoro"
@inherits FluxorComponent

@using Trackor.Features.ActivityLog.Components

@inject IDispatcher Dispatcher
@inject IState<PomodoroState> PomodoroState

<PageTitle>Pomodoro</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">
    <MudIcon Icon="@Icons.Outlined.Timer" /> Pomodoro
</MudText>

<MudGrid Class="mb-6">
    <MudItem xs="12" Class="d-flex justify-center">
        <MudPaper Elevation="6" class="@circleCss" style="height: 300px; width: 300px;">
            <MudText Typo="Typo.h1">
                @PomodoroState.Value.Remaining.ToString(@"mm\:ss")
            </MudText>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" Class="d-flex justify-center gap-3">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.NotStarted" OnClick="StartTimer" Disabled="@(PomodoroState.Value.Running || PomodoroState.Value.Finished)">
            Start
        </MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Filled.StopCircle" OnClick="StopTimer" Disabled="@(!PomodoroState.Value.Running || PomodoroState.Value.Finished)">
            Stop
        </MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" StartIcon="@Icons.Filled.RestartAlt" OnClick="Reset" Disabled="@(PomodoroState.Value.Running)">
            Reset
        </MudButton>
    </MudItem>
    <MudItem xs="12" Class="d-flex justify-center align-center gap-3">
        <MudText>Duration:</MudText>
        <MudButton OnClick="() => editingDuration = true" Variant="Variant.Outlined" Size="Size.Small" Class="mr-6" Disabled="@(PomodoroState.Value.Running || PomodoroState.Value.Finished)">@PomodoroState.Value.DefaultDurationInMinutes:00</MudButton>
        <MudText>Elapsed: @PomodoroState.Value.Elapsed.ToString(@"mm\:ss")</MudText>
    </MudItem>
    @if (editingDuration)
    {
        <MudItem xs="12" Class="d-flex justify-center align-center gap-3">
            <MudSlider @bind-Value="durationSliderValue" Min="1" Max="59" Step="1" ValueLabel="true" Style="width: 50%;">@durationSliderValue</MudSlider>
            <MudButton OnClick="SaveDuration" Variant="Variant.Outlined" Color="Color.Primary">Save Duration</MudButton>
            <MudButton OnClick="() => editingDuration = false" Variant="Variant.Outlined" Color="Color.Default">Cancel</MudButton>
        </MudItem>
    }
    <MudItem xs="12" Class="d-flex justify-center gap-3">
        <MudCheckBox @bind-Checked="@logActivity" Label="Create an Activity Log entry"></MudCheckBox>
    </MudItem>
</MudGrid>

@if (logActivity)
{
    <ActivityLogForm />
}

@code {
    private bool logActivity = false;
    private bool editingDuration = false;
    private double durationSliderValue;

    private string circleCss
    {
        get
        {
            var baseCss = "d-flex rounded-circle align-center justify-center";
            string colorCss = "";

            if (PomodoroState.Value.Finished)
            {
                colorCss = "mud-theme-warning";
            }
            else if (PomodoroState.Value.Running)
            {
                colorCss = "mud-theme-info";
            }
            else
            {
                colorCss = "mud-theme-primary";
            }

            return $"{baseCss} {colorCss}";
        }
    }

    protected override void OnInitialized()
    {
        durationSliderValue = PomodoroState.Value.DefaultDurationInMinutes;
        SubscribeToAction<PomodoroSetDurationAction>(action => durationSliderValue = action.Duration);
        Dispatcher.Dispatch(new PomodoroLoadDurationAction());
        Dispatcher.Dispatch(new PomodoroInitializeTimerAction());
        base.OnInitialized();
    }

    private void StartTimer()
    {
        Dispatcher.Dispatch(new PomodoroStartTimerAction());
    }

    private void StopTimer()
    {
        Dispatcher.Dispatch(new PomodoroStopTimerAction());
    }

    private void Reset()
    {
        Dispatcher.Dispatch(new PomodoroResetAction());
    }

    private void SaveDuration()
    {
        editingDuration = false;
        var newDuration = (int)durationSliderValue;
        Dispatcher.Dispatch(new PomodoroSaveDurationAction(newDuration));
    }
}
