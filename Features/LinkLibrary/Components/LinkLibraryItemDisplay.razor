@inherits FluxorComponent

@inject IJSRuntime JSRuntime
@inject IDispatcher Dispatcher

<MudPaper Class="mb-6 pa-3" Elevation="6">
    <MudText Typo="Typo.h6" Class="d-flex justify-space-between flex-grow-1">
        <MudLink Href="@(Link.Url)" Target="_blank" Class="mr-3" title="Source Link">
            <MudIcon Icon="@Icons.Material.Filled.Link" Color="Color.Default" ViewBox="0 -6 24 24" /> @Link.Label
        </MudLink>
        <span>
            <MudIconButton OnClick="Delete" Color="Color.Error" Variant="Variant.Text" Icon="@Icons.Material.Filled.Delete" Title="Delete" Class="mx-1" />
            <MudIconButton OnClick="Edit" Variant="Variant.Text" Icon="@Icons.Material.Filled.Edit" Title="Edit" Class="mx-1" />
            <MudIconButton OnClick="CopyToClipboard" Variant="Variant.Text" Icon="@Icons.Material.Filled.ContentPaste" Title="Copy to Clipboard" Class="mx-1" />
        </span>
    </MudText>
    <MudElement Class="rounded-lg">
        @Link.Description
    </MudElement>
</MudPaper>

@code {

    [Parameter]
    public LinkLibraryItem Link { get; set; }

    private async Task CopyToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Link.Url);
        Dispatcher.Dispatch(new SnackbarShowInfoAction($"{Link.Label} url copied to clipboard"));
    }

    private void Edit()
    {
        Dispatcher.Dispatch(new LinkLibraryEditLinkAction(Link));
    }

    private void Delete()
    {
        Dispatcher.Dispatch(new LinkLibraryDeleteLinkAction(Link));
    }

}
