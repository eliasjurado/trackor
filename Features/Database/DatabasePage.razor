@page "/database"
@inherits FluxorComponent

@using Trackor.Features.Database.Components

@inject NavigationManager NavigationManager
@inject IState<DatabaseState> DatabaseState
@inject IDispatcher Dispatcher

<PageTitle>Database</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="false">
    <MudIcon Icon="@Icons.Material.Filled.Storage" /> Database
</MudText>
<MudText Typo="Typo.h6" GutterBottom="true">
    v.@DatabaseState.Value.DbVersion
</MudText>
<InputFile id="dbInputFile" OnChange="UploadFile" hidden accept=".sqlite3" />

<MudAlert Severity="Severity.Error" Class="mb-6" Elevation="6">
    This application's data is saved in a SQLite database file in the application (browser) cache.
    If the cache is cleared for any reason, all saved data will be lost. It is recommended to
    periodically download the database file if you would like to store a backup.
</MudAlert>

<MudGrid>
    <MudItem xs="12" md="6" lg="4">
        <MudCard Elevation="6">
            <MudCardContent Style="min-height: 130px;">
                <MudText Typo="Typo.h5">Download the database</MudText>
                <MudText Typo="Typo.body2">Save the database to the local file system.</MudText>
            </MudCardContent>
            <MudCardActions>
                @if (!string.IsNullOrEmpty(DatabaseState.Value.DownloadUrl))
                {
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.CloudDownload" Href="@DatabaseState.Value.DownloadUrl" Target="_blank" download="@dbFileName">Download Database</MudButton>
                }
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" md="6" lg="4">
        <MudCard Elevation="6">
            <MudCardContent Style="min-height: 130px;">
                <MudText Typo="Typo.h5">Restore a database</MudText>
                <MudText Typo="Typo.body2">Upload a previously saved Trackor database file into the application cache.</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" HtmlTag="label" for="dbInputFile" StartIcon="@Icons.Material.Filled.CloudUpload">Restore from Backup</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" md="6" lg="4">
        <MudCard Elevation="6">
            <MudCardContent Style="min-height: 130px;">
                <MudText Typo="Typo.h5">Delete the database</MudText>
                <MudText Typo="Typo.body2">Delete the database that currently exists in the application cache and replace it with an empty database file.</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" OnClick="DeleteDatabase">Delete Database</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

<MudPaper Class="mt-6 mb-3 pa-3" Elevation="6">
    <MudText Typo="Typo.h4" Class="mb-3">Database Statistics:</MudText>
    <MudGrid>
        <DatabaseStatBlock Label="Activity Log Items" Icon="@Icons.Material.Filled.EventNote" Count="DatabaseState.Value.ActivityCount" />
        <DatabaseStatBlock Label="Tasks" Icon="@Icons.Material.Outlined.Task" Count="DatabaseState.Value.TaskCount" />
        <DatabaseStatBlock Label="Code Snippets" Icon="@Icons.Material.Filled.Code" Count="DatabaseState.Value.CodeSnippetCount" />
        <DatabaseStatBlock Label="Links" Icon="@Icons.Material.Filled.Link" Count="DatabaseState.Value.LinkCount" />
        <DatabaseStatBlock Label="Categories" Icon="@Icons.Material.Filled.FolderCopy" Count="DatabaseState.Value.CategoryCount" />
        <DatabaseStatBlock Label="Projects" Icon="@Icons.Material.Filled.Handyman" Count="DatabaseState.Value.ProjectCount" />
    </MudGrid>
</MudPaper>

@code {
    string dbFileName;

    protected override void OnInitialized()
    {
        Dispatcher.Dispatch(new DatabaseBuildDownloadUrlAction());
        Dispatcher.Dispatch(new DatabaseLoadStatsAction());
        SetDownloadFileNameWithTimestamp();
        SubscribeToAction<DatabaseUploadedAction>((action) => RefreshPage());
        SubscribeToAction<DatabaseDeletedAction>((action) => RefreshPage());
        base.OnInitialized();
    }

    private void DeleteDatabase()
    {
        Dispatcher.Dispatch(new DatabaseDeleteAction());
    }

    private async void UploadFile(InputFileChangeEventArgs e)
    {
        var fileContent = new byte[e.File.Size];
        await e.File.OpenReadStream().ReadAsync(fileContent);
        Dispatcher.Dispatch(new DatabaseUploadAction(fileContent));
    }

    private void SetDownloadFileNameWithTimestamp()
    {
        var dateStamp = DateTime.Now.ToString("yyyyMMddHHmm");
        dbFileName = $"trackordb-{dateStamp}.sqlite3";
    }

    private void RefreshPage()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}
