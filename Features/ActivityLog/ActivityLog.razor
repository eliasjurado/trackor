@page "/activitylog"
@inherits FluxorComponent

@using Trackor.Features.ActivityLog.Model
@using Trackor.Features.Categories
@using Trackor.Features.Categories.Model
@using Trackor.Features.Projects
@using Trackor.Features.Projects.Model

@inject IState<ActivityLogState> ActivityLogState
@inject IState<CategoriesState> CategoriesState
@inject IState<ProjectsState> ProjectsState
@inject IDispatcher Dispatcher

<PageTitle>Activity Log</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">
    <MudIcon Icon="@Icons.Material.Filled.EventAvailable" />
    Activity Log
</MudText>

@if (ActivityLogState.Value.IsLoaded)
{
    <MudPaper Class="pa-3 mb-3" Elevation="6">
        <MudFocusTrap DefaultFocus="DefaultFocus.None">
            <MudForm @ref="_activityLogForm" @bind-IsValid="@_formIsValid">
                <div class="d-flex align-center justify-space-between">
                    <MudAutocomplete T="Category" Label="Category" @bind-Value="_selectedCategory" SearchFunc="@CategorySearch" ToStringFunc="@( c => c == null ? null : $"{c.Title}")" />
                    <MudAutocomplete T="Project" Label="Project" @bind-Value="_selectedProject" SearchFunc="@ProjectSearch" ToStringFunc="@( p => p == null ? null : $"{p.Title}")" Class="mx-6" />
                    <MudDatePicker Label="Activity Date" @bind-Date="_activityDate" />
                </div>
                <MudTextField @ref="_titleFieldRef" T="string" Label="Activity Title" @bind-Value="_activityTitle" Required="true" RequiredError="Activity Title is required" />
                <MudTextField T="string" Label="Narrative" @bind-Value="_activityNarrative" Lines="3" />
                <div class="d-flex align-center justify-space-between mt-6">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_formIsValid)" OnClick="AddNewActivity" Class="ml-auto">Add</MudButton>
                </div>
            </MudForm>
        </MudFocusTrap>
    </MudPaper>

    <MudTable Items="@Items" Hover="true" Elevation="6">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Title</MudTh>
            <MudTh>Narrative</MudTh>
            <MudTh>Date</MudTh>
            <MudTh>Duration</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Narrative">@context.Narrative</MudTd>
            <MudTd DataLabel="Date">@context.Date</MudTd>
            <MudTd DataLabel="Duration">@context.Duration</MudTd>
        </RowTemplate>
    </MudTable>
}
else
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}

@code {
    ActivityLogItem[] Items => ActivityLogState.Value.ActivityLogItems;

    MudForm _activityLogForm;
    Category _selectedCategory;
    Project _selectedProject;
    string _activityTitle = "";
    string _activityNarrative = "";
    DateTime? _activityDate = DateTime.Now;
    bool _formIsValid;

    MudTextField<string> _titleFieldRef;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (!ActivityLogState.Value.IsLoaded)
        {
            Dispatcher.Dispatch(new ActivityLogLoadItemsAction());
        }

        if (!CategoriesState.Value.Categories.Any())
        {
            Dispatcher.Dispatch(new CategoriesLoadAction());
        }

        if (!ProjectsState.Value.Projects.Any())
        {
            Dispatcher.Dispatch(new ProjectsLoadAction());
        }
    }

    private async Task AddNewActivity()
    {
        var newActivity = new ActivityLogItem
        {
            CategoryId = _selectedCategory?.Id,
            ProjectId = _selectedProject?.Id,
            Title = _activityTitle,
            Narrative = _activityNarrative,
            Date = _activityDate.HasValue ? DateOnly.FromDateTime(_activityDate.Value) : DateOnly.FromDateTime(DateTime.Now),
            Duration = TimeSpan.Zero
        };

        Dispatcher.Dispatch(new ActivityLogSaveItemAction(newActivity));
        await ResetActivityLogForm();
    }

    private async Task ResetActivityLogForm()
    {
        _activityTitle = null;
        _activityNarrative = null;
        _activityLogForm.ResetValidation();
        _formIsValid = false;
        await _titleFieldRef.FocusAsync();
    }

    private async Task<IEnumerable<Category>> CategorySearch(string value)
    {
        await Task.Delay(0);
        return CategoriesState.Value.Categories;
    }

    private async Task<IEnumerable<Project>> ProjectSearch(string value)
    {
        await Task.Delay(0);
        return ProjectsState.Value.Projects;
    }
}
