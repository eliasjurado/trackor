@page "/activitylog"
@inherits FluxorComponent

@using System.Text

@inject IState<ActivityLogState> ActivityLogState
@inject IState<CategoriesState> CategoriesState
@inject IState<ProjectsState> ProjectsState
@inject IDispatcher Dispatcher
@inject IJSRuntime JSRuntime

<PageTitle>Activity Log</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">
    <MudIcon Icon="@Icons.Material.Filled.EventAvailable" />
    Activity Log
</MudText>

@if (ActivityLogState.Value.IsLoaded)
{
    <MudPaper Class="pa-3 mb-3" Elevation="6">
        <MudFocusTrap DefaultFocus="DefaultFocus.None">
            <MudForm @ref="_activityLogForm" @bind-IsValid="@_formIsValid">
                <MudGrid>
                    <MudItem xs="4">
                        <MudAutocomplete T="Category" Label="Category" @bind-Value="_selectedCategory" SearchFunc="@CategorySearch" ToStringFunc="@( c => c == null ? null : $"{c.Title}")" ResetValueOnEmptyText="true"/>
                    </MudItem>
                    <MudItem xs="4">
                        <MudAutocomplete T="Project" Label="Project" @bind-Value="_selectedProject" SearchFunc="@ProjectSearch" ToStringFunc="@( p => p == null ? null : $"{p.Title}")" ResetValueOnEmptyText="true" Class="mx-6" />
                    </MudItem>
                    <MudItem xs="4">
                        <MudDatePicker Label="Activity Date" @bind-Date="_activityDate" />
                    </MudItem>
                </MudGrid>
                <MudGrid>
                    <MudItem xs="8">
                        <MudTextField @ref="_titleFieldRef" T="string" Label="Activity Title" @bind-Value="_activityTitle" Required="true" xs="6" />
                    </MudItem>
                    <MudItem xs="2">
                        <MudNumericField @bind-Value="@_activityHours" Label="Hours" Min="0" Max="24" Variant="Variant.Text"></MudNumericField>
                    </MudItem>
                    <MudItem xs="2">
                        <MudNumericField @bind-Value="@_activityMinutes" Label="Minutes" Min="0" Max="59" Variant="Variant.Text"></MudNumericField>
                    </MudItem>
                </MudGrid>
                <MudGrid>
                    <MudItem xs="8"></MudItem>
                    <MudItem xs="4" Style="text-align:right">
                        @if (_selectedId != 0)
                        {
                            <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="ResetActivityLogForm">Cancel Edit</MudButton>
                        }
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_formIsValid)" OnClick="SaveActivityLogItem" Class="ml-3">Save</MudButton>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudFocusTrap>
    </MudPaper>

    <MudPaper Class="pa-3 mb-3" Elevation="6">
        <MudToolBar>
            <MudDateRangePicker Label="Date Range" @bind-DateRange="_actionBarDateRange" />
            <MudSpacer />
            <MudIconButton OnClick="UnarchiveForDateRange" Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Unarchive" Title="Unarchive" Class="mx-1" />
            <MudIconButton OnClick="ArchiveForDateRange" Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Archive" Title="Archive" Class="mx-1" />
            <MudIconButton OnClick="CopyToClipboard" Variant="Variant.Outlined" Icon="@Icons.Material.Filled.ContentPaste" Title="Copy to Clipboard" Class="mx-1" />
        </MudToolBar>
    </MudPaper>

    <MudTable Items="@Items" Hover="true" Elevation="6">
        <HeaderContent>
            <MudTh>Date</MudTh>
            <MudTh>Category</MudTh>
            <MudTh>Project</MudTh>
            <MudTh>Duration</MudTh>
            <MudTh>Activity</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Date">@context.Date</MudTd>
            <MudTd DataLabel="Category">@(context.CategoryId == null ? "" : CategoriesState.Value.Categories.Single(x => x.Id == context.CategoryId).Title)</MudTd>
            <MudTd DataLabel="Project">@(context.ProjectId == null ? "" : ProjectsState.Value.Projects.Single(x => x.Id == context.ProjectId).Title)</MudTd>
            <MudTd DataLabel="Duration">@context.Duration.ToString(@"hh\:mm")</MudTd>
            <MudTd DataLabel="Activity">@context.Title</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Filled.ContentCopy" OnClick="() => EditActivityLogItem(context, copyOnly: true)" Title="Copy as New"></MudIconButton>
                <MudIconButton Icon="@Icons.Filled.Edit" OnClick="() => EditActivityLogItem(context)" Title="Edit"></MudIconButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}
else
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}

@code {
    ActivityLogItem[] Items => ActivityLogState.Value.ActivityLogItems;

    MudForm _activityLogForm;
    Category _selectedCategory;
    Project _selectedProject;
    int _selectedId = 0;
    string _activityTitle = "";
    int _activityHours = 0;
    int _activityMinutes = 0;
    DateTime? _activityDate = DateTime.Now;
    bool _formIsValid;

    MudTextField<string> _titleFieldRef;

    DateRange _actionBarDateRange = new DateRange(DateTime.Now.Date.AddDays(-7), DateTime.Now.Date);

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (!ActivityLogState.Value.IsLoaded)
        {
            Dispatcher.Dispatch(new ActivityLogLoadItemsAction());
        }

        if (!CategoriesState.Value.Categories.Any())
        {
            Dispatcher.Dispatch(new CategoriesLoadAction());
        }

        if (!ProjectsState.Value.Projects.Any())
        {
            Dispatcher.Dispatch(new ProjectsLoadAction());
        }
    }

    private async Task SaveActivityLogItem()
    {
        var timespan = new TimeSpan(hours: _activityHours, minutes: _activityMinutes, seconds: 0);
        var newActivity = new ActivityLogItem
            {
                Id = _selectedId,
                CategoryId = _selectedCategory?.Id,
                ProjectId = _selectedProject?.Id,
                Title = _activityTitle,
                Date = _activityDate.HasValue ? DateOnly.FromDateTime(_activityDate.Value) : DateOnly.FromDateTime(DateTime.Now),
                Duration = timespan
            };

        await ResetActivityLogForm();
        Dispatcher.Dispatch(new ActivityLogSaveItemAction(newActivity));
    }

    private void EditActivityLogItem(ActivityLogItem activityLogItem, bool copyOnly = false)
    {
        _selectedId = copyOnly ? 0 : activityLogItem.Id;
        _activityTitle = activityLogItem.Title;
        _activityHours = activityLogItem.Duration.Hours;
        _activityMinutes = activityLogItem.Duration.Minutes;
        _activityDate = activityLogItem.Date.ToDateTime(TimeOnly.MinValue);
        _selectedCategory = activityLogItem.CategoryId == null ? null : CategoriesState.Value.Categories.Single(x => x.Id == activityLogItem.CategoryId);
        _selectedProject = activityLogItem.ProjectId == null ? null : ProjectsState.Value.Projects.Single(x => x.Id == activityLogItem.ProjectId);
        _activityLogForm.ResetValidation();
        StateHasChanged();
    }

    private async Task ResetActivityLogForm()
    {
        // Leave Category, Project, and Date where they are
        // to make subsequent entries easier

        _selectedId = 0;
        _activityTitle = "";
        _activityHours = 0;
        _activityMinutes = 0;
        _activityLogForm.ResetValidation();
        _formIsValid = false;

        await _titleFieldRef.FocusAsync();
    }

    private void ArchiveForDateRange()
    {
        if (_actionBarDateRange.Start.HasValue && _actionBarDateRange.End.HasValue)
        {
            var startDate = DateOnly.FromDateTime(_actionBarDateRange.Start.Value);
            var endDate = DateOnly.FromDateTime(_actionBarDateRange.End.Value);
            Dispatcher.Dispatch(new ActivityLogArchiveAction(startDate, endDate));
        }
    }

    private void UnarchiveForDateRange()
    {
        if (_actionBarDateRange.Start.HasValue && _actionBarDateRange.End.HasValue)
        {
            var startDate = DateOnly.FromDateTime(_actionBarDateRange.Start.Value);
            var endDate = DateOnly.FromDateTime(_actionBarDateRange.End.Value);
            Dispatcher.Dispatch(new ActivityLogUnarchiveAction(startDate, endDate));
        }
    }

    private async Task CopyToClipboard()
    {
        if (_actionBarDateRange.Start.HasValue && _actionBarDateRange.End.HasValue)
        {
            var startDate = DateOnly.FromDateTime(_actionBarDateRange.Start.Value);
            var endDate = DateOnly.FromDateTime(_actionBarDateRange.End.Value);

            var stringBuilder = new StringBuilder();
            ActivityLogState.Value.ActivityLogItems
                .Where(x => x.Date >= startDate)
                .Where(x => x.Date <= endDate)
                .OrderBy(x => x.Date)
                .ThenBy(x => x.Id)
                .ToList()
                .ForEach(item => stringBuilder.AppendLine(BuildStringForCopying(item)));

            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", stringBuilder.ToString());
        }
    }

    private string BuildStringForCopying(ActivityLogItem item)
    {
        var stringBuilder = new StringBuilder();
        stringBuilder.Append($"{item.Date.ToShortDateString()}: ");

        if (item.Duration > TimeSpan.Zero)
        {
            stringBuilder.Append($"({item.Duration.ToString(@"hh\:mm")}) ");
        }

        if (item.CategoryId is not null)
        {
            stringBuilder.Append($"{CategoriesState.Value.Categories.Single(x => x.Id == item.CategoryId).Title} - ");
        }

        if (item.ProjectId is not null)
        {
            stringBuilder.Append($"{ProjectsState.Value.Projects.Single(x => x.Id == item.ProjectId).Title} - ");
        }

        stringBuilder.Append($"{item.Title.Trim()}");
        return stringBuilder.ToString();
    }

    private async Task<IEnumerable<Category>> CategorySearch(string value)
    {
        await Task.Yield();
        return CategoriesState.Value.Categories;
    }

    private async Task<IEnumerable<Project>> ProjectSearch(string value)
    {
        await Task.Yield();
        return ProjectsState.Value.Projects;
    }
}
