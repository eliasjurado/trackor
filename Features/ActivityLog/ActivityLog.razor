@page "/activitylog"
@inherits FluxorComponent

@using System.ComponentModel.DataAnnotations
@using Trackor.Features.ActivityLog.Model
@using Trackor.Features.Activity.Model

@inject IState<ActivityLogState> ActivityLogState
@inject IDispatcher Dispatcher

<PageTitle>Activity Log</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">
    <MudIcon Icon="@Icons.Material.Filled.EventAvailable" />
    Activity Log
</MudText>

@if (ActivityLogState.Value.IsLoaded)
{
    <MudPaper Class="pa-3 mb-3" Elevation="6">
        <MudForm @bind-IsValid="@formIsValid">
            <div class="d-flex align-center justify-space-between">
                <MudAutocomplete T="Category" Label="Category" @bind-Value="selectedCategory" SearchFunc="@CategorySearch" ToStringFunc="@( c => c == null ? null : $"{c.Title}")" />
                <MudAutocomplete T="Project" Label="Project" @bind-Value="selectedProject" SearchFunc="@ProjectSearch" ToStringFunc="@( p => p == null ? null : $"{p.Title}")" Class="mx-6" />
                <MudDatePicker Label="Activity Date" @bind-Date="activityDate" />
            </div>
            <MudTextField T="string" Label="Activity Title" @bind-Value="activityTitle" Required="true" RequiredError="Activity Title is required" />
            <MudTextField T="string" Label="Narrative" @bind-Value="activityNarrative" Lines="3" />
            <div class="d-flex align-center justify-space-between mt-6">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!formIsValid)" OnClick="AddNewActivity" Class="ml-auto">Add</MudButton>
            </div>
        </MudForm>
    </MudPaper>

    <MudTable Items="@Items" Hover="true" Elevation="6">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Title</MudTh>
            <MudTh>Narrative</MudTh>
            <MudTh>Date</MudTh>
            <MudTh>Duration</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Narrative">@context.Narrative</MudTd>
            <MudTd DataLabel="Date">@context.Date</MudTd>
            <MudTd DataLabel="Duration">@context.Duration</MudTd>
        </RowTemplate>
    </MudTable>
}
else
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}

@code {
    bool formIsValid;
    ActivityLogItem[] Items => ActivityLogState.Value.ActivityLogItems;
    Category selectedCategory;
    Project selectedProject;
    string activityTitle = "";
    string activityNarrative = "";
    DateTime? activityDate = DateTime.Now;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (!ActivityLogState.Value.IsLoaded)
        {
            Dispatcher.Dispatch(new ActivityLogLoadAction());
        }
    }

    private void AddNewActivity()
    {
        var newId = Items.MaxBy(x => x.Id).Id + 1;
        var newActivity = new ActivityLogItem
        {
            Id = newId,
            CategoryId = selectedCategory?.Id,
            ProjectId = selectedProject?.Id,
            Title = activityTitle,
            Narrative = activityNarrative,
            Date = activityDate.HasValue ? DateOnly.FromDateTime(activityDate.Value) : DateOnly.FromDateTime(DateTime.Now),
            Duration = TimeSpan.Zero
        };
        Dispatcher.Dispatch(new ActivityLogAddAction(newActivity));

        activityTitle = string.Empty;
        activityNarrative = string.Empty;
    }

    private async Task<IEnumerable<Category>> CategorySearch(string value)
    {
        await Task.Delay(100);
        return new List<Category>
        {
            new Category {Id = 1, Title = "First Category", Active = true },
            new Category {Id = 2, Title = "Second Category", Active = true },
            new Category {Id = 3, Title = "Third Category", Active = true },
            new Category {Id = 4, Title = "Fourth Category", Active = true }
        };
    }

    private async Task<IEnumerable<Project>> ProjectSearch(string value)
    {
        await Task.Delay(100);
        return new List<Project>
        {
            new Project {Id = 1, Title = "First Project", Active = true },
            new Project {Id = 2, Title = "Second Project", Active = true },
            new Project {Id = 3, Title = "Third Project", Active = true },
            new Project {Id = 4, Title = "Fourth Project", Active = true }
        };
    }
}
