@inject IJSRuntime _jsRuntime
@inject IDispatcher Dispatcher

@code {
    protected override async Task OnInitializedAsync()
    {
        // this function is in the sw-registrator.js file
        // that file is used to register the app's service worker
        // and provides a hook that we can use to know when 
        // the service worker finds an update to the app

        await _jsRuntime.InvokeAsync<object>(
           identifier: "registerForUpdateAvailableNotification",
           DotNetObjectReference.Create(this),
           nameof(OnUpdateAvailable));
    }

    [JSInvokable(nameof(OnUpdateAvailable))]
    public Task OnUpdateAvailable()
    {
        Dispatcher.Dispatch(new UpdateDetectorSetUpdateAvailableAction());

        var clickAction = () => Dispatcher.Dispatch(new UpdateDetectorNotificationClickedAction());
        Dispatcher.Dispatch(new SnackbarShowInfoAction("A new version of Trackor is available! Click here to reload.", clickAction));

        return Task.CompletedTask;
    }
}